# ================================================================
#                Photo Map Application - Configuration
# ================================================================

# ------------------------------
#  Application Settings
# ------------------------------

# Defines the name of the application
spring.application.name=Photo Map Application

# ------------------------------
#  Database Configuration (PostgreSQL)
# ------------------------------

# Uses environment variables to configure the database connection
spring.datasource.url=${SPRING_DATASOURCE_URL}             # Database URL
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}   # Database username
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}   # Database password

# Hibernate settings for database schema management
spring.jpa.hibernate.ddl-auto=update                      # Updates schema automatically
spring.datasource.driver-class-name=org.postgresql.Driver # PostgreSQL driver
spring.jpa.show-sql=true 
spring.jpa.properties.hibernate.format_sql=true           # Formats SQL queries for better readability
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect # Specifies PostgreSQL dialect for Hibernate

# ------------------------------
#  AWS S3 Configuration
# ------------------------------

# Configures AWS S3 storage for image uploads
aws.s3.bucket-name=${S3_BUCKET_NAME}         # S3 bucket name
aws.access-key=${AWS_ACCESS_KEY_ID}          # AWS access key (retrieved from environment variables)
aws.secret-key=${AWS_SECRET_ACCESS_KEY}      # AWS secret key (retrieved from environment variables)
aws.region=${AWS_REGION}                     # AWS region where the S3 bucket is located

# ------------------------------
#  Backend Configuration
# ------------------------------

# Defines the backend service URL, with a default fallback to localhost if not provided
backend.url=${BACKEND_URL:http://localhost:8092}

# ------------------------------
#  Static Files Configuration
# ------------------------------

# Defines the static file path pattern for serving uploaded images via API
spring.mvc.static-path-pattern=/api/images/uploads/**

# ------------------------------
#  CORS Configuration (Cross-Origin Resource Sharing)
# ------------------------------

# Specifies allowed origins for frontend applications
spring.mvc.cors.allow-origin=http://localhost

# Defines allowed HTTP methods for cross-origin requests
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE

# Permits all headers in CORS requests
spring.mvc.cors.allowed-headers=*

# Enables sending credentials (e.g., cookies, authentication headers) in CORS requests
spring.web.cors.allow-credentials=true

# ------------------------------
#  File Upload Configuration
# ------------------------------

# Defines the location for storing uploaded files
spring.resources.static-locations=file:./uploads/

# Defines the default upload directory
app.upload.dir=uploads/

# Enables support for multipart file uploads
spring.servlet.multipart.enabled=true

# Specifies the maximum file size for uploads
spring.servlet.multipart.max-file-size=50MB

# Specifies the maximum request size for file uploads
spring.servlet.multipart.max-request-size=1000MB

# ------------------------------
#  Server Configuration
# ------------------------------

# Sets the backend server port
server.port=8093

# ------------------------------
#  Additional Hibernate Configuration
# ------------------------------

# Enables support for handling large objects (LOB) in PostgreSQL
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Ensures database initialization on startup
spring.datasource.initialization-mode=always

# ------------------------------
#  JWT (JSON Web Token) Configuration
# ------------------------------

# Defines the secret key used for JWT authentication
jwt.secret=${JWT_SECRET}
